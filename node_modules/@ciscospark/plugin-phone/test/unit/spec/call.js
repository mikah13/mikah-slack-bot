/**!
 *
 * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import {Call} from '@ciscospark/plugin-phone';
import {browserOnly} from '@ciscospark/test-helper-mocha';
import AmpState from 'ampersand-state';

browserOnly(describe)(`plugin-phone`, function() {
  this.timeout(30000);

  describe(`Call`, () => {
    let call;

    afterEach(() => {
      call.parent.internal.mercury.removeAllListeners();
      call.parent.off();
      call.off();
    });

    function makeCall() {
      const parent = new MockSpark({
        children: {
          mercury: AmpState.extend()
        }
      });

      call = new Call({
        parent
      });

      return call;
    }

    describe(`on(localMediaStream:change)`, () => {
      it(`gets triggered when the localMediaStream is updated`, () => {
        call = makeCall();
        const spy = sinon.spy();
        call.on(`localMediaStream:change`, spy);
        assert.notOk(call.localMediaStream);
        return navigator.mediaDevices.getUserMedia({
          audio: true,
          video: true,
          fake: true
        })
          .then((stream) => {
            assert.notCalled(spy);
            call.localMediaStream = stream;
            assert.calledOnce(spy);
          });
      });
    });

    describe(`on(remoteMediaStream:change)`, () => {
      it(`gets triggered when the remoteMediaStream is updated`, () => {
        call = makeCall();
        const spy = sinon.spy();
        call.on(`remoteMediaStream:change`, spy);
        assert.notOk(call.remoteMediaStream);
        return navigator.mediaDevices.getUserMedia({
          audio: true,
          video: true,
          fake: true
        })
          .then((stream) => {
            assert.notCalled(spy);
            call.media.remoteMediaStream = stream;
            assert.calledOnce(spy);
          });
      });
    });
  });
});
