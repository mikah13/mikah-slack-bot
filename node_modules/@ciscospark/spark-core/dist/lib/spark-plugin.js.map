{"version":3,"sources":["spark-plugin.js"],"names":["SparkPlugin","extend","derived","boundedStorage","deps","fn","unboundedStorage","config","cache","spark","namespace","getNamespace","toLowerCase","logger","console","parent","collection","Error","session","type","ready","default","clear","options","attributes","forEach","key","unset","_children","_collections","reset","initialize","args","prototype","cloned","_dataTypes","dataType","set","bind","on","model","trigger","inspect","depth","serialize","props","request","upload","when","eventName","rest","length","resolve","once","_filterSetParameters","value","attrs"],"mappings":"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","file":"spark-plugin.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport AmpState from 'ampersand-state';\nimport util from 'util';\nimport {\n  cloneDeep,\n  isObject,\n  omit\n} from 'lodash';\nimport {makeSparkPluginStore} from './storage';\n\n/**\n * @class\n */\nconst SparkPlugin = AmpState.extend({\n  derived: {\n    boundedStorage: {\n      deps: [],\n      fn() {\n        return makeSparkPluginStore(`bounded`, this);\n      }\n    },\n    unboundedStorage: {\n      deps: [],\n      fn() {\n        return makeSparkPluginStore(`unbounded`, this);\n      }\n    },\n    config: {\n      // figure out why caching config breaks the refresh integration test\n      // but not the refresh automation test.\n      cache: false,\n      deps: [\n        `spark`,\n        `spark.config`\n      ],\n      fn() {\n        if (this.spark && this.spark.config) {\n          const namespace = this.getNamespace();\n          if (namespace) {\n            return this.spark.config[namespace.toLowerCase()];\n          }\n\n          return this.spark.config;\n        }\n\n        return {};\n      }\n    },\n\n    logger: {\n      deps: [\n        `spark`,\n        `spark.logger`\n      ],\n      fn() {\n        return this.spark.logger || console;\n      }\n    },\n\n    spark: {\n      deps: [`parent`],\n      fn() {\n        if (!this.parent && !this.collection) {\n          throw new Error(`Cannot determine \\`this.spark\\` without \\`this.parent\\` or \\`this.collection\\`. Please initialize \\`this\\` via \\`children\\` or \\`collection\\` or set \\`this.parent\\` manually`);\n        }\n\n        /* eslint consistent-this: [0] */\n        let parent = this;\n        while (parent.parent || parent.collection) {\n          parent = parent.parent || parent.collection;\n        }\n\n        return parent;\n      }\n    }\n  },\n\n  session: {\n    parent: {\n      type: `any`\n    },\n    /**\n     * Indicates this plugin is ready to be used. Defaults to true but can be\n     * overridden by plugins as appropriate. Used by {@link SparkCore#read}\n     * @instance\n     * @memberof SparkPlugin\n     * @type {boolean}\n     */\n    ready: {\n      default: true,\n      type: `boolean`\n    }\n  },\n\n  /**\n   * Overrides AmpersandState#clear to make sure we never unset `parent` and\n   * recursively visits children/collections.\n   * @instance\n   * @memberof SparkPlugin\n   * @param {Object} options\n   * @returns {SparkPlugin}\n   */\n  clear(options) {\n    Object.keys(this.attributes).forEach((key) => {\n      if (key !== `parent`) {\n        this.unset(key, options);\n      }\n    });\n\n    Object.keys(this._children).forEach((key) => {\n      this[key].clear();\n    });\n\n    Object.keys(this._collections).forEach((key) => {\n      this[key].reset();\n    });\n\n    return this;\n  },\n\n  initialize(...args) {\n    Reflect.apply(AmpState.prototype.initialize, this, args);\n\n    // This is a bit of a hack to allow makeStateDataType work\n    let cloned = false;\n    Object.keys(this._dataTypes).forEach((key) => {\n      const dataType = this._dataTypes[key];\n      if (dataType.set) {\n        if (!cloned) {\n          this._dataTypes = cloneDeep(this._dataTypes);\n          cloned = true;\n        }\n        dataType.set = dataType.set.bind(this);\n      }\n    });\n\n    // Propagate change:[attribute] events from children\n    this.on(`change`, (model, options) => {\n      if (this.parent) {\n        this.parent.trigger(`change:${this.getNamespace().toLowerCase()}`, this.parent, this, options);\n      }\n    });\n  },\n\n  /**\n   * @instance\n   * @memberof SparkPlugin\n   * @param {number} depth\n   * @private\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize({\n      props: true,\n      session: true,\n      derived: true\n    }), `boundedStorage`, `unboundedStorage`, `config`, `logger`, `spark`, `parent`), {depth});\n  },\n\n  request(...args) {\n    return this.spark.request(...args);\n  },\n\n  upload(...args) {\n    return this.spark.upload(...args);\n  },\n\n  when(eventName, ...rest) {\n    if (rest && rest.length > 0) {\n      throw new Error(`#when() does not accept a callback, you must attach to its promise`);\n    }\n    return new Promise((resolve) => {\n      this.once(eventName, (...args) => resolve(args));\n    });\n  },\n\n  /**\n   * Helper function for dealing with both forms of {@link AmpersandState#set()}\n   * @param {string} key\n   * @param {mixed} value\n   * @param {Object} options\n   * @private\n   * @returns {Array<Object, Object>}\n   */\n  _filterSetParameters(key, value, options) {\n    let attrs;\n    if (isObject(key) || key === null) {\n      attrs = key;\n      options = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    options = options || {};\n\n    return [attrs, options];\n  }\n});\n\nexport default SparkPlugin;\n"]}