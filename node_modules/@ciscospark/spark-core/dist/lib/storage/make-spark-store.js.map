{"version":3,"sources":["make-spark-store.js"],"names":["makeSparkStore","bindings","type","spark","SparkStore","keyFactory","namespace","logger","info","set","promises","forEach","binding","push","clear","all","key","_getBinding","then","del","get","value","put","serialize","resolve","adapter","bind","_binding","config","storage","prototype"],"mappings":"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","file":"make-spark-store.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Events from 'ampersand-events';\nimport {oneFlight} from '@ciscospark/common';\n\nconst bindings = new WeakMap();\n\n/**\n * Makes a SparkStore for the specified type bound to the specified spark instance\n * @param {string} type\n * @param {ProxySpark} spark\n * @private\n * @returns {SparkStore}\n */\nexport default function makeSparkStore(type, spark) {\n\n  /**\n   * Lazy Key-Value Store Interface\n   */\n  class SparkStore {\n    /**\n     * @param {Object} attrs\n     * @param {Object} options\n     * @returns {Store}\n     */\n    constructor() {\n      spark.logger.info(`spark-store: constructing ${type}Storage`);\n      bindings.set(this, new Map());\n    }\n\n    /**\n     * Provides easy access to the storage adapter identified in config.\n     * @returns {Object}\n     */\n    get adapter() {\n      return spark.config.storage[`${type}Adapter`];\n    }\n\n    /**\n     * @returns {WeakMap}\n     */\n    get bindings() {\n      return bindings.get(this);\n    }\n\n    /**\n     * Clears the store\n     * @returns {Promise}\n     */\n    clear() {\n      const promises = [];\n      this.bindings.forEach((binding) => {\n        promises.push(binding.clear());\n      });\n\n      return Promise.all(promises);\n    }\n\n    /**\n     * Deletes the specified key from the store\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {[type]}\n     */\n    del(namespace, key) {\n      spark.logger.info(`spark-store: removing ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.del(key));\n    }\n\n    /**\n     * Retrieves the value specified by key from the store. Rejects with\n     * NotFoundError if no value can be found\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {Promise}\n     */\n    get(namespace, key) {\n      spark.logger.info(`spark-store: retrieving ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.get(key));\n    }\n\n    /**\n     * Writes a value to the store. Deletes the specified key from the store\n     * if passed `undefined`\n     * @param {string} namespace\n     * @param {string} key\n     * @param {any} value\n     * @returns {Promise} Resolves with value (to simplify write-through caching)\n     */\n    put(namespace, key, value) {\n      if (typeof value === `undefined`) {\n        return this.del(namespace, key);\n      }\n      spark.logger.info(`spark-store: setting ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.put(key, value.serialize ? value.serialize() : value))\n        .then(() => value);\n    }\n\n    @oneFlight({keyFactory: (namespace) => namespace})\n    /**\n     * Creates an interface bound to the specified namespace\n     * @param {string} namespace\n     * @private\n     * @returns {Promise}\n     */\n    // suppress doc warning because decorators confuse eslint\n    // eslint-disable-next-line require-jsdoc\n    _getBinding(namespace) {\n      return new Promise((resolve) => {\n        spark.logger.info(`storage: getting binding for \\`${namespace}\\``);\n        const binding = this.bindings.get(namespace);\n        if (binding) {\n          spark.logger.info(`storage: found binding for \\`${namespace}\\``);\n          return resolve(binding);\n        }\n\n        return resolve(this.adapter.bind(namespace, {logger: spark.logger})\n          .then((_binding) => {\n            spark.logger.info(`storage: made binding for \\`${namespace}\\``);\n            this.bindings.set(namespace, _binding);\n            return _binding;\n          }));\n      });\n    }\n  }\n\n  Object.assign(SparkStore.prototype, Events);\n\n  return new SparkStore();\n}\n"]}