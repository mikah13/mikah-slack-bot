{"version":3,"sources":["make-spark-plugin-store.js"],"names":["makeSparkPluginStorage","defers","serialize","value","serialized","forEach","key","val","length","undefined","map","k","empty","reduce","acc","type","context","SparkPluginStorage","keyFactory","set","spark","del","getNamespace","args","defer","get","then","res","resolve","put","logger","info","promise","initValue","parent","catch","reason","process","env","NODE_ENV","toString","includes","reject"],"mappings":"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","file":"make-spark-plugin-store.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {Defer, oneFlight} from '@ciscospark/common';\nimport {NotFoundError} from './errors';\nimport {result} from 'lodash';\nimport {isArray, isObject} from 'lodash';\n\nconst defers = new WeakMap();\n\n/**\n * Walks an object before writing it to the store and omits empty arrays\n * @private\n * @param {Object} value\n * @returns {Object}\n */\nfunction serialize(value) {\n  if (!isObject(value)) {\n    return value;\n  }\n\n  const serialized = value.serialize ? value.serialize() : value;\n\n  Object.keys(serialized).forEach((key) => {\n    const val = serialized[key];\n    if (isArray(val)) {\n      if (val.length === 0) {\n        serialized[key] = undefined;\n      }\n      else {\n        serialized[key] = val.map(serialize);\n      }\n    }\n    else if (isObject(val)) {\n      Object.keys(val).forEach((k) => {\n        val[k] = serialize(val[k]);\n      });\n    }\n  });\n\n  const empty = Object.keys(serialized).reduce((acc, key) => acc && !serialized[key], true);\n\n  if (empty) {\n    return undefined;\n  }\n  return serialized;\n}\n\n/**\n * [makeSparkPluginStorage description]\n * @param {[type]} type\n * @param {[type]} context\n * @private\n * @returns {[type]}\n */\nexport default function makeSparkPluginStorage(type, context) {\n  /**\n   * Interface between SparkPlugin and Spark#boundeStorage or\n   * Spark#unboundedStorage\n   */\n  class SparkPluginStorage {\n    /**\n     * @param {Object} attrs\n     * @param {Object} options\n     * @returns {SparkPluginStorage}\n     */\n    constructor() {\n      defers.set(this, new Map());\n    }\n\n    /**\n     * Clears an entire namespace\n     * @returns {Promise}\n     */\n    clear() {\n      return context.spark[`${type}Storage`].del(context.getNamespace());\n    }\n\n    /**\n     * Deletes the specified key from the store\n     * @param {string} key\n     * @returns {[type]}\n     */\n    del(...args) {\n      return context.spark[`${type}Storage`].del(context.getNamespace(), ...args);\n    }\n\n    /**\n     * Retrieves the value specified by key from the store. Rejects with\n     * NotFoundError if no value can be found\n     * @param {string} key\n     * @returns {Promise}\n     */\n    get(key) {\n      let defer = defers.get(this).get(key);\n      if (!defer) {\n        defer = new Defer();\n        defers.get(this).set(key, defer);\n      }\n\n      return context.spark[`${type}Storage`].get(context.getNamespace(), key)\n        .then((res) => {\n          defer.resolve();\n          return res;\n        });\n    }\n\n    /**\n     * Writes a value to the store\n     * @param {string} key\n     * @param {any} value\n     * @returns {Promise}\n     */\n    put(key, value) {\n      return context.spark[`${type}Storage`].put(context.getNamespace(), key, serialize(value));\n    }\n\n    /**\n     * Returns a Promise that won't resolve until the value specified by key has\n     * been attempted to be loaded from the store. This allows us to lazily\n     * prevent certain method from executing until the specified keys have been\n     * retrieved from the store.\n     * @param {string} key\n     * @returns {Promise}\n     */\n    waitFor(key) {\n      context.logger.info(`plugin-storage(${context.getNamespace()}): waiting to init key \\`${key}\\``);\n      const defer = defers.get(this).get(key);\n      if (defer) {\n        context.logger.info(`plugin-storage(${context.getNamespace()}): already inited \\`${key}\\``);\n        return defer.promise;\n      }\n\n      context.logger.info(`plugin-storage(${context.getNamespace()}): initing \\`${key}\\``);\n      return this.initValue(key);\n    }\n\n    @oneFlight({keyFactory: (key) => `initValue-${key}`})\n    /**\n     * Attempts to load the specified key from the store and set it on the parent\n     * object.\n     * @param {string} key\n     * @returns {Promise} Resolves (but not with the retrieved value) when\n     * the value retrieval complete\n     */\n    // suppress doc warning because decorators confuse eslint\n    // eslint-disable-next-line require-jsdoc\n    initValue(key) {\n      const defer = new Defer();\n      defers.get(this).set(key, defer);\n\n      // Intentionally bypasses this.get so we don't resolve the promise until\n      // after the parent value is set.\n      context.spark[`${type}Storage`].get(context.getNamespace(), key)\n        .then((value) => {\n          context.logger.info(`plugin-storage(${context.getNamespace()}): got \\`${key}\\` for first time`);\n          if (key === `@`) {\n            context.parent.set(value);\n          }\n          else if (result(context[key], `isState`)) {\n            context[key].set(value);\n          }\n          else {\n            context.set(key, value);\n          }\n          context.logger.info(`plugin-storage(${context.getNamespace()}): set \\`${key}\\` for first time`);\n          defer.resolve();\n          context.logger.info(`plugin-storage(${context.getNamespace()}): inited \\`${key}\\``);\n        })\n        .catch((reason) => {\n          // The  next conditional is a bit of an unfortunate solution to deal\n          // with circular dependencies in unit tests. It should not effect\n          // integration tests or production code.\n          if (reason instanceof NotFoundError || process.env.NODE_ENV !== `production` && reason.toString().includes(`MockNotFoundError`)) {\n            context.logger.info(`plugin-storage(${context.getNamespace()}): no data for \\`${key}\\`, continuing`);\n            return defer.resolve();\n          }\n          context.logger.info(`plugin-storage(${context.getNamespace()}): failed to init \\`${key}\\``, reason);\n          return defer.reject(reason);\n        });\n\n      return defer.promise;\n    }\n  }\n\n  return new SparkPluginStorage();\n}\n"]}