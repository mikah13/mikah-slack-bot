{"version":3,"sources":["spark-http-error.js"],"names":["SparkHttpError","res","message","prototype","parse","enumerable","value","options","url","method","uri","service","toUpperCase","resource","headers","trackingid","makeSubTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;AAEA;;;IAGqBA,c;;;;;;;;;;;AACnB;;;;;;0BAMMC,G,EAAK;AACT,UAAIC,UAAU,qBAAc,oBAAUC,SAAV,CAAoBC,KAAlC,EAAyC,IAAzC,EAA+C,CAACH,GAAD,CAA/C,CAAd;;AAEA,oCAAuB,IAAvB,aAAwC;AACtCI,oBAAY,KAD0B;AAEtCC,eAAOL,IAAIM;AAF2B,OAAxC;;AAKA,UAAI,KAAKA,OAAL,CAAaC,GAAjB,EAAsB;AACpBN,0BAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaC,GAApD;AACD,OAFD,MAGK,IAAI,KAAKD,OAAL,CAAaG,GAAjB,EAAsB;AACzBR,0BAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaG,GAApD;AACD,OAFI,MAGA;AACHR,0BAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaI,OAAb,CAAqBC,WAArB,EAAvC,SAA6E,KAAKL,OAAL,CAAaM,QAA1F;AACD;AACDX,2CAAmC,KAAKK,OAAL,CAAaO,OAAb,CAAqBC,UAAxD;AACA,UAAI,KAAKR,OAAL,CAAaO,OAAb,IAAwB,KAAKP,OAAL,CAAaO,OAAb,cAA5B,EAAgE;AAC9DZ,sCAA4B,KAAKK,OAAL,CAAaO,OAAb,cAA5B;AACD;AACDZ;;AAEA,aAAOA,OAAP;AACD;;;wBA1CH;;;;;;kBAWqBF,c;;;AAkCrB,oBAAUgB,YAAV,CAAuBhB,cAAvB","file":"spark-http-error.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {HttpError} from '@ciscospark/http-core';\n\n/**\n * Spark-specific http error class\n */\nexport default class SparkHttpError extends HttpError {\n  /**\n   * Very similar to {@link HttpError#parse()}, but additionally adds some\n   * useful headers to the message string\n   * @param {HttpResponse} res\n   * @returns {string}\n   */\n  parse(res) {\n    let message = Reflect.apply(HttpError.prototype.parse, this, [res]);\n\n    Reflect.defineProperty(this, `options`, {\n      enumerable: false,\n      value: res.options\n    });\n\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n    if (this.options.headers && this.options.headers[`x-trans-id`]) {\n      message += `\\nX-Trans-Id: ${this.options.headers[`x-trans-id`]}`;\n    }\n    message += `\\n`;\n\n    return message;\n  }\n}\n\nHttpError.makeSubTypes(SparkHttpError);\n"]}