{"version":3,"sources":["spark-user-agent.js"],"names":["strings","SparkUserAgentInterceptor","options","appName","appVersion","libName","libVersion","set","headers","uri","includes","spark","config","credentials","samlUrl","tokenUrl","authorizeUrl","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;;;;AAPA;;;;;;AAUA,IAAMA,UAAU,uBAAhB;AACA;;;;IAGqBC,yB;;;AACnB;;;;;;AAMA,uCAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;;AACxB,QAAMC,UAAU,mBAAID,OAAJ,yBAAhB;AACA,QAAME,aAAa,mBAAIF,OAAJ,4BAAnB;;AAEA,QAAMG,UAAU,mBAAIH,OAAJ,sBAAiC,KAAjC,iCAAhB;AACA,QAAMI,aAAa,mBAAIJ,OAAJ,iCAAnB;;AALwB,4KAOlBA,OAPkB;;AAQxB,QAAIC,WAAWC,UAAf,EAA2B;AACzBJ,cAAQO,GAAR,QAAqBJ,OAArB,SAAgCC,UAAhC,WAA+C,kCAA/C,WAA8EC,OAA9E,SAAyFC,UAAzF;AACD,KAFD,MAGK;AACHN,cAAQO,GAAR,QAAqBF,OAArB,SAAgCC,UAAhC,WAA+C,kCAA/C;AACD;AAbuB;AAczB;;AAED;;;;;;;;;AAOA;;;;;8BAKUJ,O,EAAS;AACjBA,cAAQM,OAAR,GAAkBN,QAAQM,OAAR,IAAmB,EAArC;;AAEA,UAAIN,QAAQO,GAAR,KAAgBP,QAAQO,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BC,OAAnD,KAA+DZ,QAAQO,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BE,QAAnD,CAA/D,IAA+Hb,QAAQO,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BG,YAAnD,CAA/I,CAAJ,EAAsN;AACpN,eAAOd,OAAP;AACD;;AAED,UAAI,sBAAsBA,QAAQM,OAAlC,EAA2C;AACzC,YAAI,CAACN,QAAQM,OAAR,oBAAL,EAA0C;AACxC,wCAAuBN,QAAQM,OAA/B;AACD;AACD,eAAON,OAAP;AACD;;AAEDA,cAAQM,OAAR,uBAAsCR,QAAQiB,GAAR,CAAY,IAAZ,CAAtC;;AAEA,aAAOf,OAAP;AACD;;;6BA1Be;AACd,aAAO,IAAID,yBAAJ,CAA8B,EAACU,OAAO,IAAR,EAA9B,CAAP;AACD;;;;;kBA5BkBV,yB","file":"spark-user-agent.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {inBrowser} from '@ciscospark/common';\nimport {Interceptor} from '@ciscospark/http-core';\nimport {get} from 'lodash';\n\nconst strings = new WeakMap();\n/**\n * @class\n */\nexport default class SparkUserAgentInterceptor extends Interceptor {\n  /**\n   * @param {Object} [options={}]\n   * @param {SparkCore} [options.spark]\n   * @private\n   * @returns {SparkUserAgentInterceptor}\n   */\n  constructor(options = {}) {\n    const appName = get(options, `spark.config.appName`);\n    const appVersion = get(options, `spark.config.appVersion`);\n\n    const libName = get(options, `spark.ciscospark`, false) ? `ciscospark` : `spark-js-sdk`;\n    const libVersion = get(options, `spark.version`, `development`);\n\n    super(options);\n    if (appName && appVersion) {\n      strings.set(this, `${appName}/${appVersion} (${inBrowser ? `web` : `node`}) ${libName}/${libVersion}`);\n    }\n    else {\n      strings.set(this, `${libName}/${libVersion} (${inBrowser ? `web` : `node`})`);\n    }\n  }\n\n  /**\n   * @returns {SparkUserAgentInterceptor}\n   */\n  static create() {\n    return new SparkUserAgentInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n\n    if (options.uri && (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.tokenUrl) || options.uri.includes(this.spark.config.credentials.authorizeUrl))) {\n      return options;\n    }\n\n    if (`spark-user-agent` in options.headers) {\n      if (!options.headers[`spark-user-agent`]) {\n        Reflect.deleteProperty(options.headers, `spark-user-agent`);\n      }\n      return options;\n    }\n\n    options.headers[`spark-user-agent`] = strings.get(this);\n\n    return options;\n  }\n}\n"]}