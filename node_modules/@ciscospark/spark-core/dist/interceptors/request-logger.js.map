{"version":3,"sources":["request-logger.js"],"names":["RequestLoggerInterceptor","options","logger","console","info","method","uri","now","Date","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","getTime","toISOString","body","length","inspect","depth","e","warn","resolve","reason","onRequest","error","stack","reject","spark"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AACA;;;;AAEA;;;AAVA;;;;;;IAaqBA,wB;;;;;;;;;;;;AAQnB;;;;;8BAKUC,O,EAAS;AACjB,UAAMC,SAAS,mBAAI,IAAJ,kBAA0BC,OAA1B,CAAf;AACAD,aAAOE,IAAP;AACAF,aAAOE,IAAP,aAAwBH,QAAQI,MAAR,SAAxB,EAAiDJ,QAAQK,GAAzD;AACAJ,aAAOE,IAAP,uBAAkC,mBAAIH,OAAJ,uBAAlC;AACA;AACA,UAAI,mBAAIA,OAAJ,uBAAJ,EAAwC;AACtCC,eAAOE,IAAP,iBAA4B,mBAAIH,OAAJ,uBAA5B;AACD;AACD,UAAI,mBAAI,IAAJ,iCAAJ,EAA+C;AAC7CC,eAAOE,IAAP,aAAwB,mBAAI,IAAJ,iCAAxB;AACD;AACD,UAAMG,MAAM,IAAIC,IAAJ,EAAZ;AACA,UAAIC,QAAQC,GAAR,CAAYC,8BAAhB,EAAgD;AAC9CT,eAAOE,IAAP,wBAAmCG,IAAIK,OAAJ,EAAnC,EAAkDL,IAAIM,WAAJ,EAAlD;AACA,YAAI;AACF;AACA;AACA,cAAIZ,QAAQa,IAAR,IAAgBb,QAAQa,IAAR,CAAaC,MAA7B,IAAuC,CAAC,uBAAQd,QAAQa,IAAhB,CAAxC,IAAiE,CAAC,wBAASb,QAAQa,IAAjB,CAAtE,EAA8F;AAC5FZ,mBAAOE,IAAP,qBAAgC,eAAKY,OAAL,CAAa,oBAAKf,OAAL,SAAb,EAAoC,EAACgB,OAAO,IAAR,EAApC,CAAhC;AACD,WAFD,MAGK;AACHf,mBAAOE,IAAP,qBAAgC,eAAKY,OAAL,CAAaf,OAAb,EAAsB,EAACgB,OAAO,IAAR,EAAtB,CAAhC;AACD;AACF,SATD,CAUA,OAAOC,CAAP,EAAU;AACRhB,iBAAOiB,IAAP,yCAAoDD,CAApD;AACD;AACF;;AAED,aAAO,kBAAQE,OAAR,CAAgBnB,OAAhB,CAAP;AACD;;AAED;;;;;;;;;mCAMeA,O,EAASoB,M,EAAQ;AAC9B;AACA;AACA,WAAKC,SAAL,CAAerB,OAAf;AACA,UAAMC,SAAS,mBAAI,IAAJ,kBAA0BC,OAA1B,CAAf;AACAD,aAAOqB,KAAP,qBAAiCF,OAAOG,KAAxC;AACAtB,aAAOE,IAAP;;AAEA,aAAO,kBAAQqB,MAAR,CAAeJ,MAAf,CAAP;AACD;;;;AA5DD;;;6BAGgB;AACd,aAAO,IAAIrB,wBAAJ,CAA6B,EAAC0B,OAAO,IAAR,EAA7B,CAAP;AACD;;;;;kBANkB1B,wB","file":"request-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {get, has, isArray, isString, omit} from 'lodash';\nimport util from 'util';\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class RequestLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {RequestLoggerInterceptor}\n   */\n  static create() {\n    return new RequestLoggerInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, `spark.logger`, console);\n    logger.info(`/**********************************************************************\\\\ `);\n    logger.info(`Request:`, options.method || `GET`, options.uri);\n    logger.info(`WEBEX_TRACKINGID: `, get(options, `headers.trackingid`));\n    /* istanbul ignore next */\n    if (has(options, `headers.x-trans-id`)) {\n      logger.info(`X-Trans-ID: `, get(options, `headers.x-trans-id`));\n    }\n    if (has(this, `spark.internal.device.userId`)) {\n      logger.info(`User ID:`, get(this, `spark.internal.device.userId`));\n    }\n    const now = new Date();\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.info(`timestamp (start): `, now.getTime(), now.toISOString());\n      try {\n        // Determine if body is a buffer without relying on Buffer to avoid\n        // node/browser conflicts.\n        if (options.body && options.body.length && !isArray(options.body) && !isString(options.body)) {\n          logger.info(`Request Options:`, util.inspect(omit(options, `body`), {depth: null}));\n        }\n        else {\n          logger.info(`Request Options:`, util.inspect(options, {depth: null}));\n        }\n      }\n      catch (e) {\n        logger.warn(`Could not stringify request options:`, e);\n      }\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    this.onRequest(options);\n    const logger = get(this, `spark.logger`, console);\n    logger.error(`Request Failed: `, reason.stack);\n    logger.info(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n}\n"]}