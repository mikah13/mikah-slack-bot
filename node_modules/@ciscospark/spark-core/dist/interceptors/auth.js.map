{"version":3,"sources":["auth.js"],"names":["AuthInterceptor","options","headers","authorization","resolve","requiresCredentials","then","requires","spark","credentials","getUserToken","config","scope","token","toString","uri","includes","device","preDiscoveryServices","hydraServiceUrl","internal","isSpecificService","isHydra","service","isService","isServiceUrl","reason","shouldAttemptReauth","logger","info","canRefresh","refresh","replay","reject","replayCount","maxAuthenticationReplays","error","Error","request","shouldRefreshAccessToken","statusCode"],"mappings":"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","file":"auth.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class AuthInterceptor extends Interceptor {\n  /**\n   * @returns {AuthInterceptor}\n   */\n  static create() {\n    return new AuthInterceptor({spark: this});\n  }\n\n  /**\n   * @see {@link Interceptor#onRequest}\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n\n    // If Authorizations is already set, don't overwrite it\n    if (`authorization` in options.headers || `auth` in options) {\n      // If Authorization is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.authorization) {\n        Reflect.deleteProperty(options.headers, `authorization`);\n      }\n      return Promise.resolve(options);\n    }\n\n    return this.requiresCredentials(options)\n      .then((requires) => {\n        if (!requires) {\n          return options;\n        }\n\n        return this.spark.credentials.getUserToken(this.spark.config.credentials.scope)\n          .then((token) => {\n            options.headers.authorization = token.toString();\n            return options;\n          });\n      });\n  }\n\n  /**\n   * Determines if the provided options object needs an auth header\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  requiresCredentials(options) {\n    if (options.uri && options.uri.includes(this.spark.config.device.preDiscoveryServices.hydraServiceUrl)) {\n      return Promise.resolve(true);\n    }\n\n    if (!this.spark.internal.device) {\n      return Promise.resolve(false);\n    }\n\n    return this.spark.internal.device.isSpecificService(`hydra`, options.uri)\n      .then((isHydra) => {\n        if (isHydra) {\n          return true;\n        }\n\n        if (options.service) {\n          return this.spark.internal.device.isService(options.service);\n        }\n\n        if (options.uri) {\n          return this.spark.internal.device.isServiceUrl(options.uri);\n        }\n        return false;\n      });\n  }\n\n  /**\n   * @see {@link Interceptor#onResponseError}\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    return this.shouldAttemptReauth(reason, options)\n      .then((shouldAttemptReauth) => {\n        if (shouldAttemptReauth) {\n          this.spark.logger.info(`auth: received 401, attempting to reauthenticate`);\n\n          if (reason.options.headers) {\n            Reflect.deleteProperty(reason.options.headers, `authorization`);\n          }\n\n          if (this.spark.credentials.canRefresh) {\n            return this.spark.credentials.refresh()\n              .then(() => this.replay(options));\n          }\n        }\n\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Replays the request\n   * @param {Object} options\n   * @returns {Object}\n   */\n  replay(options) {\n    if (options.replayCount) {\n      options.replayCount += 1;\n    }\n    else {\n      options.replayCount = 1;\n    }\n\n    if (options.replayCount > this.spark.config.maxAuthenticationReplays) {\n      this.spark.logger.error(`auth: failed after ${this.spark.config.maxAuthenticationReplays} replay attempts`);\n      return Promise.reject(new Error(`Failed after ${this.spark.config.maxAuthenticationReplays} replay attempts`));\n    }\n\n    this.spark.logger.info(`auth: replaying request ${options.replayCount} time`);\n\n    return this.spark.request(options);\n  }\n\n  /**\n   * Indicates whether or not the current request should refresh its access\n   * token in event of a 401\n   * @param {Error} reason\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  shouldAttemptReauth(reason, options) {\n    if (options && options.shouldRefreshAccessToken === false) {\n      return Promise.resolve(false);\n    }\n\n    if (reason.statusCode === 401) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(false);\n  }\n}\n"]}