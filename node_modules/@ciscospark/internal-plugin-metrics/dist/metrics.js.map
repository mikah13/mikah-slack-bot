{"version":3,"sources":["metrics.js"],"names":["Metrics","extend","children","batcher","clientMetricsBatcher","callDiagnosticEventsBatcher","namespace","sendUnstructured","key","value","submit","request","submitClientMetrics","eventName","props","preLoginId","payload","metricName","tags","fields","type","_payload","metrics","postPreLoginMetric","aliasUser","method","api","resource","headers","body","qs","alias","spark","credentials","getClientToken","then","token","authorization","toString","submitCallDiagnosticEvents","event","eventPayload"],"mappings":";;;;;;;;;;;;;;+BAAA;;;;;;AAMA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,uBAAYC,MAAZ,SASb,gGATa,UAAmB;AACjCC,YAAU;AACRC,8BADQ;AAERC,wDAFQ;AAGRC;AAHQ,GADuB;;AAOjCC,sBAPiC;;AAUjCC,kBAViC,4BAUhBC,GAVgB,EAUXC,KAVW,EAUJ;AAC3B,WAAO,KAAKC,MAAL,CAAYF,GAAZ,EAAiBC,KAAjB,CAAP;AACD,GAZgC;AAcjCC,QAdiC,kBAc1BF,GAd0B,EAcrBC,KAdqB,EAcd;AACjB,WAAO,KAAKN,OAAL,CAAaQ,OAAb,CAAqB,sBAAc,EAACH,QAAD,EAAd,EAAqBC,KAArB,CAArB,CAAP;AACD,GAhBgC;;;AAkBjC;;;;;;;AAOAG,qBAzBiC,+BAyBbC,SAzBa,EAyBFC,KAzBE,EAyBKC,UAzBL,EAyBiB;AAChD,QAAMC,UAAU,EAACC,YAAYJ,SAAb,EAAhB;AACA,QAAIC,MAAMI,IAAV,EAAgB;AACdF,cAAQE,IAAR,GAAeJ,MAAMI,IAArB;AACD;AACD,QAAIJ,MAAMK,MAAV,EAAkB;AAChBH,cAAQG,MAAR,GAAiBL,MAAMK,MAAvB;AACD;AACD,QAAIL,MAAMM,IAAV,EAAgB;AACdJ,cAAQI,IAAR,GAAeN,MAAMM,IAArB;AACD;AACD,QAAIL,UAAJ,EAAgB;AACd,UAAMM,WAAW;AACfC,iBAAS,CACPN,OADO;AADM,OAAjB;AAKA;AACA;AACA;AACA,aAAO,KAAKO,kBAAL,CAAwBF,QAAxB,EAAkCN,UAAlC,CAAP;AACD;AACD,WAAO,KAAKX,oBAAL,CAA0BO,OAA1B,CAAkCK,OAAlC,CAAP;AACD,GAhDgC;;;AAmDjC;;;;;AAKAQ,WAxDiC,qBAwDvBT,UAxDuB,EAwDX;AACpB,WAAO,KAAKJ,OAAL,CAAa;AAClBc,oBADkB;AAElBC,oBAFkB;AAGlBC,+BAHkB;AAIlBC,eAAS;AACP,6BAAqBb;AADd,OAJS;AAOlBc,YAAM,EAPY;AAQlBC,UAAI;AACFC,eAAO;AADL;AARc,KAAb,CAAP;AAYD,GArEgC;AAuEjCR,oBAvEiC,8BAuEdP,OAvEc,EAuELD,UAvEK,EAuEO;AAAA;;AACtC,WAAO,KAAKiB,KAAL,CAAWC,WAAX,CAAuBC,cAAvB,GACJC,IADI,CACC,UAACC,KAAD;AAAA,aAAW,MAAKzB,OAAL,CAAa;AAC5Bc,sBAD4B;AAE5BC,sBAF4B;AAG5BC,0CAH4B;AAI5BC,iBAAS;AACPS,yBAAeD,MAAME,QAAN,EADR;AAEP,+BAAqBvB;AAFd,SAJmB;AAQ5Bc,cAAMb;AARsB,OAAb,CAAX;AAAA,KADD,CAAP;AAWD,GAnFgC;AAqFjCuB,4BArFiC,sCAqFNvB,OArFM,EAqFG;AAClC,QAAMwB,QAAQ;AACZpB,8BADY;AAEZqB,oBAAczB;AAFF,KAAd;AAIA,WAAO,KAAKX,2BAAL,CAAiCM,OAAjC,CAAyC6B,KAAzC,CAAP;AACD,GA3FgC;AAAA;AAAA,CAAnB,iJAAhB;;kBA+FexC,O","file":"metrics.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport Batcher from './batcher';\nimport ClientMetricsBatcher from './client-metrics-batcher';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-events-batcher';\nimport {deprecated} from '@ciscospark/common';\n\nconst Metrics = SparkPlugin.extend({\n  children: {\n    batcher: Batcher,\n    clientMetricsBatcher: ClientMetricsBatcher,\n    callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher\n  },\n\n  namespace: `Metrics`,\n\n  @deprecated(`Metrics#sendUnstructured() is deprecated; please use Metrics#submit()`)\n  sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n\n  submit(key, value) {\n    return this.batcher.request(Object.assign({key}, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics(eventName, props, preLoginId) {\n    const payload = {metricName: eventName};\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n    if (props.type) {\n      payload.type = props.type;\n    }\n    if (preLoginId) {\n      const _payload = {\n        metrics: [\n          payload\n        ]\n      };\n      // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser(preLoginId) {\n    return this.request({\n      method: `POST`,\n      api: `metrics`,\n      resource: `clientmetrics`,\n      headers: {\n        \"x-prelogin-userid\": preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n\n  postPreLoginMetric(payload, preLoginId) {\n    return this.spark.credentials.getClientToken()\n      .then((token) => this.request({\n        method: `POST`,\n        api: `metrics`,\n        resource: `clientmetrics-prelogin`,\n        headers: {\n          authorization: token.toString(),\n          \"x-prelogin-userid\": preLoginId\n        },\n        body: payload\n      }));\n  },\n\n  submitCallDiagnosticEvents(payload) {\n    const event = {\n      type: `diagnostic-event`,\n      eventPayload: payload\n    };\n    return this.callDiagnosticEventsBatcher.request(event);\n  }\n\n});\n\nexport default Metrics;\n"]}