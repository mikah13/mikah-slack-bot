{"version":3,"sources":["mercury.js"],"names":["normalReconnectReasons","Mercury","extend","namespace","session","connected","default","type","connecting","socket","localClusterServiceUrls","derived","listening","deps","fn","connect","logger","info","resolve","spark","internal","device","registered","register","then","_connectWithBackoff","disconnect","backoffCall","abort","removeAllListeners","once","close","listen","stopListening","processRegistrationStatusEvent","message","_applyOverrides","event","headers","headerKeys","forEach","keyPath","_prepareUrl","webSocketUrl","feature","getFeature","webSharedMercury","parse","query","outboundWireFormat","bufferStates","aliasHttpStatus","mercuryRegistrationStatus","isRegistrationRefreshEnabled","multipleConnections","format","_attemptConnection","callback","on","_onclose","_onmessage","args","_emit","all","credentials","getUserToken","token","open","forceCloseDelay","config","pingInterval","pongTimeout","toString","trackingId","sessionId","Date","now","catch","reason","code","getNumRetries","retries","refresh","force","warn","error","reject","call","onComplete","err","undefined","setStrategy","ExponentialStrategy","initialDelay","backoffTimeReset","maxDelay","backoffTimeMax","maxRetries","failAfter","number","delay","Math","min","strategy_","nextBackoffDelay_","process","env","NODE_ENV","debug","stack","start","trigger","_getEventHandlers","eventType","split","name","handlers","handlerName","camelize","s","push","toLowerCase","unset","_reconnect","includes","envelope","data","ENABLE_MERCURY_LOGGING","reduce","promise","handler"],"mappings":"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","file":"mercury.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {deprecated, oneFlight} from '@ciscospark/common';\nimport {get, set} from 'lodash';\nimport S from 'string';\nimport backoff from 'backoff';\nimport Socket from './socket';\nimport {\n  BadRequest,\n  Forbidden,\n  NotAuthorized,\n  UnknownResponse\n  // NotFound\n} from './errors';\nimport url from 'url';\n\nconst normalReconnectReasons = [\n  `idle`,\n  `done (forced)`,\n  `pong not received`,\n  `pong mismatch`\n];\n\nconst Mercury = SparkPlugin.extend({\n  namespace: `Mercury`,\n\n  session: {\n    connected: {\n      default: false,\n      type: `boolean`\n    },\n    connecting: {\n      default: false,\n      type: `boolean`\n    },\n    socket: `object`,\n    localClusterServiceUrls: `object`\n  },\n\n  derived: {\n    listening: {\n      deps: [`connected`],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  @oneFlight\n  connect() {\n    if (this.connected) {\n      this.logger.info(`mercury: already connected, will not connect again`);\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n    return Promise.resolve(this.spark.internal.device.registered || this.spark.internal.device.register())\n      .then(() => {\n        this.logger.info(`mercury: connecting`);\n\n        return this._connectWithBackoff();\n      });\n  },\n\n  @oneFlight\n  disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info(`mercury: aborting connection`);\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners(`message`);\n        this.once(`offline`, resolve);\n        this.socket.close();\n        return;\n      }\n\n      resolve();\n    });\n  },\n\n  @deprecated(`Mercury#listen(): Use Mercury#connect() instead`)\n  listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n\n  @deprecated(`Mercury#stopListening(): Use Mercury#disconnect() instead`)\n  stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n\n  processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n\n  _applyOverrides(event) {\n    if (!event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _prepareUrl(webSocketUrl) {\n    if (!webSocketUrl) {\n      webSocketUrl = this.spark.internal.device.webSocketUrl;\n    }\n    return this.spark.internal.feature.getFeature(`developer`, `web-shared-mercury`)\n      .then((webSharedMercury) => {\n        webSocketUrl = url.parse(webSocketUrl, true);\n        Object.assign(webSocketUrl.query, {\n          outboundWireFormat: `text`,\n          bufferStates: true,\n          aliasHttpStatus: true\n        });\n\n        if (webSharedMercury) {\n          Object.assign(webSocketUrl.query, {\n            mercuryRegistrationStatus: true,\n            isRegistrationRefreshEnabled: true\n          });\n          Reflect.deleteProperty(webSocketUrl.query, `bufferStates`);\n        }\n\n        if (get(this, `spark.config.device.ephemeral`, false)) {\n          webSocketUrl.query.multipleConnections = true;\n        }\n\n        return url.format(webSocketUrl);\n      });\n  },\n\n  _attemptConnection(callback) {\n    const socket = new Socket();\n    socket.on(`close`, (...args) => this._onclose(...args));\n    socket.on(`message`, (...args) => this._onmessage(...args));\n    socket.on(`sequence-mismatch`, (...args) => this._emit(`sequence-mismatch`, ...args));\n\n    Promise.all([this._prepareUrl(), this.spark.credentials.getUserToken()])\n      .then(([webSocketUrl, token]) => socket.open(webSocketUrl, {\n        forceCloseDelay: this.config.forceCloseDelay,\n        pingInterval: this.config.pingInterval,\n        pongTimeout: this.config.pongTimeout,\n        token: token.toString(),\n        trackingId: `${this.spark.sessionId}_${Date.now()}`,\n        logger: this.logger\n      }))\n      .then(() => {\n        this.socket = socket;\n        callback();\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall && this.backoffCall.getNumRetries() > 0) {\n          this._emit(`connection_failed`, reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info(`mercury: connection attempt failed`, reason);\n        // UnknownResponse is produced by IE for any 4XXX; treated it like a bad\n        // web socket url and let WDM handle the token checking\n        if (reason instanceof UnknownResponse) {\n          this.logger.info(`mercury: received unknown response code, refreshing device registration`);\n          return this.spark.internal.device.refresh()\n            .then(() => callback(reason));\n        }\n        // NotAuthorized implies expired token\n        else if (reason instanceof NotAuthorized) {\n          this.logger.info(`mercury: received authorization error, reauthorizing`);\n          return this.spark.credentials.refresh({force: true})\n            .then(() => callback(reason));\n        }\n        // // NotFound implies expired web socket url\n        // else if (reason instanceof NotFound) {\n        //   this.logger.info(`mercury: received not found error, refreshing device registration`);\n        //   return this.spark.internal.device.refresh()\n        //     .then(() => callback(reason));\n        // }\n        // BadRequest implies current credentials are for a Service Account\n        // Forbidden implies current user is not entitle for Spark\n        else if (reason instanceof BadRequest || reason instanceof Forbidden) {\n          this.logger.warn(`mercury: received unrecoverable response from mercury`);\n          this.backoffCall.abort();\n          return callback(reason);\n        }\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: failed to handle connection failure`, reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff() {\n    return new Promise((resolve, reject) => {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate`);\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit(`online`);\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on(`abort`, () => {\n        this.logger.info(`mercury: connection aborted`);\n        reject();\n      });\n\n      call.on(`callback`, (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = Math.min(call.strategy_.nextBackoffDelay_, this.config.backoffTimeMax);\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === `development`) {\n            this.logger.debug(`mercury: `, err, err.stack);\n          }\n          return;\n        }\n        this.logger.info(`mercury: connected`);\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in event handler`, error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split(`.`);\n    const handlers = [];\n\n    if (!this.spark[namespace] && !this.spark.internal[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = S(`process_${name}_event`).camelize().s;\n    if ((this.spark[namespace] || this.spark.internal[namespace])[handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      this.socket.removeAllListeners();\n      this.unset(`socket`);\n      this.connected = false;\n      this._emit(`offline`, event);\n\n      switch (event.code) {\n      case 1003:\n        // metric: disconnect\n        this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n        this._emit(`offline.permanent`, event);\n        break;\n      case 4000:\n        // metric: disconnect\n        this.logger.info(`mercury: socket replaced; will not reconnect`);\n        this._emit(`offline.replaced`, event);\n        break;\n      case 1001:\n      case 1005:\n      case 1006:\n      case 1011:\n        this.logger.info(`mercury: socket disconnected; reconnecting`);\n        this._emit(`offline.transient`, event);\n        this._reconnect();\n        // metric: disconnect\n        // if (code == 1011 && rason !== ping error) metric: unexpected disconnect\n        break;\n      case 1000:\n        if (normalReconnectReasons.includes(reason)) {\n          this.logger.info(`mercury: socket disconnected; reconnecting`);\n          this._emit(`offline.transient`, event);\n          this._reconnect();\n          // metric: disconnect\n          // if (reason === done forced) metric: force closure\n        }\n        else {\n          this.logger.info(`mercury: socket disconnected; will not reconnect`);\n          this._emit(`offline.permanent`, event);\n        }\n        break;\n      default:\n        this.logger.info(`mercury: socket disconnected unexpectedly; will not reconnect`);\n        // unexpected disconnect\n        this._emit(`offline.permanent`, event);\n      }\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in close handler`, error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug(`mercury: message envelope: `, envelope);\n    }\n\n    const data = envelope.data;\n    this._applyOverrides(data);\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n        return new Promise((resolve) => resolve((this.spark[namespace] || this.spark.internal[namespace])[name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit(`event`, event.data);\n        const [namespace] = data.eventType.split(`.`);\n        this._emit(`event:${namespace}`, envelope);\n        this._emit(`event:${data.eventType}`, envelope);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: error occurred processing socket message`, reason);\n      });\n  },\n\n  _reconnect() {\n    this.logger.info(`mercury: reconnecting`);\n    return this.connect();\n  }\n});\n\nexport default Mercury;\n"]}