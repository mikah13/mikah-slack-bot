{"version":3,"sources":["device.js"],"names":["decider","config","ephemeral","Device","extend","children","features","idAttribute","namespace","props","deviceType","intranetInactivityDuration","intranetInactivityCheckUrl","modificationTime","searchEncryptionKeyUrl","services","default","type","url","userId","webSocketUrl","derived","registered","deps","fn","Boolean","session","logoutTimer","lastUserActivityDate","determineService","key","serviceUrl","startsWith","resolve","substr","length","reject","Error","getServiceUrl","service","_getServiceUrl","then","isServiceUrl","getPreDiscoveryServiceUrl","preDiscoveryServices","initialize","args","prototype","forEach","collectionName","on","model","value","options","trigger","listenToAndRun","_resetLogoutTimer","listenTo","spark","Date","now","inspect","depth","serialize","isPreDiscoveryService","_isService","isPreDiscoveryServiceUrl","uri","_isServiceUrl","isService","isSpecificService","includes","target","indexOf","refresh","logger","info","register","body","ttl","ephemeralDeviceTTL","request","method","res","_processRegistrationSuccess","catch","reason","statusCode","clear","defaults","resource","unregister","warn","clearTimeout","refreshTimer","set","delay","unset","enableInactivityEnforcement","once","timer","headers","trackingid","logout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uFAAA;;;;;AAKA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AAKA,SAASA,OAAT,GAAmB;AACjB,SAAO,CAAC,KAAKC,MAAL,CAAYC,SAApB;AACD;;AAED,IAAMC,SAAS,uBAAYC,MAAZ,SA8CZ,iCA9CY,UA2DZ,iCA3DY,UAuEZ,6BAAaJ,OAAb,CAvEY,UA6GZ,iCA7GY,UAmHZ,iCAnHY,UA0HZ,iCA1HY,UAqKZ,iCArKY,UAsMZ,iCAtMY,UA+NZ,iCA/NY,UAAmB;AAChCK,YAAU;AACRC;AADQ,GADsB;;AAKhCC,oBALgC;;AAOhCC,qBAPgC;;AAShCC,SAAO;AACL;AACA;AACAC,wBAHK;AAILC,wCAJK;AAKLC,wCALK;AAMLC,8BANK;AAOLC,oCAPK;AAQLC,cAAU;AACR;AACA;AACAC,aAHQ,sBAGE;AACR,eAAO,EAAP;AACD,OALO;;AAMRC;AANQ,KARL;AAgBLC,iBAhBK;AAiBLC,oBAjBK;AAkBLC;AAlBK,GATyB;;AA8BhCC,WAAS;AACPC,gBAAY;AACVC,YAAM,OADI;AAEVC,QAFU,gBAEL;AACH,eAAOC,QAAQ,KAAKP,GAAb,CAAP;AACD;AAJS;AADL,GA9BuB;;AAuChCQ,WAAS;AACP;AACA;AACAC,sBAHO;AAIPC;AAJO,GAvCuB;;AA+ChCC,kBA/CgC,4BA+CfX,GA/Ce,EA+CV;AAAA;AAAA;AAAA;;AAAA;AACpB,sDAAkB,oBAAY,KAAKH,QAAjB,CAAlB,4GAA8C;AAAA,YAAnCe,GAAmC;;AAC5C,YAAMC,aAAa,KAAKhB,QAAL,CAAce,GAAd,CAAnB;AACA,YAAIZ,IAAIc,UAAJ,CAAeD,UAAf,CAAJ,EAAgC;AAC9B;AACA,iBAAO,kBAAQE,OAAR,CAAgBH,IAAII,MAAJ,CAAW,CAAX,EAAcJ,IAAIK,MAAJ,GAAa,EAA3B,CAAhB,CAAP;AACD;AACF;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASpB,WAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAanB,GAAb,uCAAf,CAAP;AACD,GAzD+B;AA4DhCoB,eA5DgC,yBA4DlBC,OA5DkB,EA4DT;AAAA;;AACrB,WAAO,KAAKC,cAAL,CAAoB,KAAKzB,QAAzB,EAAmCwB,OAAnC,EACJE,IADI,CACC,UAACC,YAAD;AAAA,aAAkBA,gBAAgB,MAAKC,yBAAL,CAA+BJ,OAA/B,CAAlC;AAAA,KADD,CAAP;AAED,GA/D+B;AAiEhCI,2BAjEgC,qCAiENJ,OAjEM,EAiEG;AACjC;AACA;AACA,WAAO,kBAAQN,OAAR,CAAgB,KAAKO,cAAL,CAAoB,KAAKvC,MAAL,CAAY2C,oBAAhC,EAAsDL,OAAtD,CAAhB,CAAP;AACD,GArE+B;AAwEhCM,YAxEgC,wBAwEZ;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAClB,yBAAc,uBAAYC,SAAZ,CAAsBF,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD;;AAEA;AACA,yCAAqCE,OAArC,CAA6C,UAACC,cAAD,EAAoB;AAC/D,aAAK3C,QAAL,CAAc4C,EAAd,aAA2BD,cAA3B,EAA6C,UAACE,KAAD,EAAQC,KAAR,EAAeC,OAAf,EAA2B;AACtE,eAAKC,OAAL,mBAA6BD,OAA7B;AACA,eAAKC,OAAL,4BAAsC,OAAKhD,QAA3C,EAAqD+C,OAArD;AACD,OAHD;AAID,KALD;;AAOA,SAAKE,cAAL,CAAoB,IAApB,uCAA+D;AAAA,aAAM,OAAKC,iBAAL,EAAN;AAAA,KAA/D;AACA,SAAKD,cAAL,CAAoB,IAApB,uCAA+D;AAAA,aAAM,OAAKC,iBAAL,EAAN;AAAA,KAA/D;AACA,SAAKC,QAAL,CAAc,KAAKC,KAAnB,mBAA2C,YAAM;AAAC,aAAK9B,oBAAL,GAA4B+B,KAAKC,GAAL,EAA5B;AAAwC,KAA1F;AACD,GAtF+B;;;AAwFhC;;;;;AAKAC,SA7FgC,mBA6FxBC,KA7FwB,EA6FjB;AACb,WAAO,eAAKD,OAAL,CAAa,oBAAK,KAAKE,SAAL,EAAL,aAAb,EAAiD,EAACD,YAAD,EAAjD,CAAP;AACD,GA/F+B;AAiGhCE,uBAjGgC,iCAiGVzB,OAjGU,EAiGD;AAC7B;AACA;AACA,WAAO,kBAAQN,OAAR,CAAgB,KAAKgC,UAAL,CAAgB,KAAKhE,MAAL,CAAY2C,oBAA5B,EAAkDL,OAAlD,CAAhB,CAAP;AACD,GArG+B;AAuGhC2B,0BAvGgC,oCAuGPC,GAvGO,EAuGF;AAC5B;AACA;AACA,WAAO,kBAAQlC,OAAR,CAAgB,KAAKmC,aAAL,CAAmB,KAAKnE,MAAL,CAAY2C,oBAA/B,EAAqDuB,GAArD,CAAhB,CAAP;AACD,GA3G+B;AA8GhCE,WA9GgC,qBA8GtB9B,OA9GsB,EA8Gb;AAAA;;AACjB,WAAO,KAAK0B,UAAL,CAAgB,KAAKlD,QAArB,EAA+BwB,OAA/B,EACJE,IADI,CACC,UAACwB,UAAD;AAAA,aAAgBA,cAAc,OAAKD,qBAAL,CAA2BzB,OAA3B,CAA9B;AAAA,KADD,CAAP;AAED,GAjH+B;AAoHhCG,cApHgC,wBAoHnByB,GApHmB,EAoHd;AAChB;AACA;AACA,WAAO,kBAAQlC,OAAR,CAAgB,KAAKmC,aAAL,CAAmB,KAAKrD,QAAxB,EAAkCoD,GAAlC,CAAhB,CAAP;AACD,GAxH+B;AA2HhCG,mBA3HgC,6BA2Hd/B,OA3Hc,EA2HLT,GA3HK,EA2HA;AAC9B,QAAIA,QAAQS,OAAZ,EAAqB;AACnB,aAAO,kBAAQN,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,WAAO,KAAKK,aAAL,CAAmBC,OAAnB,EACJE,IADI,CACC,UAACV,UAAD;AAAA,aAAgBD,IAAIyC,QAAJ,CAAaxC,UAAb,CAAhB;AAAA,KADD,CAAP;AAED,GAlI+B;AAoIhCS,gBApIgC,0BAoIjBgC,MApIiB,EAoITjC,OApIS,EAoIA;AAC9B;AACA,QAAI,CAACiC,MAAL,EAAa;AACX,aAAO,kBAAQpC,MAAR,CAAe,IAAIC,KAAJ,oCAAf,CAAP;AACD;;AAED,QAAI,CAACE,OAAL,EAAc;AACZ,aAAO,kBAAQH,MAAR,CAAe,IAAIC,KAAJ,qCAAf,CAAP;AACD;;AAED,WAAO,kBAAQJ,OAAR,CAAgBuC,OAAUjC,OAAV,gBAAhB,CAAP;AACD,GA/I+B;AAiJhC0B,YAjJgC,sBAiJrBO,MAjJqB,EAiJbjC,OAjJa,EAiJJ;AAC1B,WAAO,KAAKC,cAAL,CAAoBgC,MAApB,EAA4BjC,OAA5B,EACJE,IADI,CACC,UAACvB,GAAD;AAAA,aAASO,QAAQP,GAAR,CAAT;AAAA,KADD,CAAP;AAED,GApJ+B;AAsJhCkD,eAtJgC,yBAsJlBI,MAtJkB,EAsJVL,GAtJU,EAsJL;AACzB,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,kBAAQ/B,MAAR,CAAe,IAAIC,KAAJ,iCAAf,CAAP;AACD;;AAED,SAAK,IAAMP,GAAX,IAAkB0C,MAAlB,EAA0B;AACxB,UAAIA,OAAO1C,GAAP,KAAeqC,IAAIM,OAAJ,CAAYD,OAAO1C,GAAP,CAAZ,MAA6B,CAAhD,EAAmD;AACjD,eAAO,kBAAQG,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF;;AAED,WAAO,kBAAQA,OAAR,CAAgB,KAAhB,CAAP;AACD,GAlK+B;AAsKhCyC,SAtKgC,qBAsKtB;AAAA;;AACR,SAAKC,MAAL,CAAYC,IAAZ;;AAEA,QAAI,CAAC,KAAKtD,UAAV,EAAsB;AACpB,WAAKqD,MAAL,CAAYC,IAAZ;AACA,aAAO,KAAKC,QAAL,EAAP;AACD;;AAED,QAAMC,OAAO,oBAAK,KAAKf,SAAL,EAAL,8BAAb;AACA,QAAI,KAAK9D,MAAL,CAAYC,SAAhB,EAA2B;AACzB4E,WAAKC,GAAL,GAAW,KAAK9E,MAAL,CAAY+E,kBAAvB;AACD;;AAED,WAAO,KAAKC,OAAL,CAAa;AAClBC,mBADkB;AAElBf,WAAK,KAAKjD,GAFQ;AAGlB4D;AAHkB,KAAb,EAKJrC,IALI,CAKC,UAAC0C,GAAD;AAAA,aAAS,OAAKC,2BAAL,CAAiCD,GAAjC,CAAT;AAAA,KALD,EAMJE,KANI,CAME,UAACC,MAAD,EAAY;AACjB,UAAIA,OAAOC,UAAP,KAAsB,GAA1B,EAA+B;AAC7B;AACA;AACA,eAAKZ,MAAL,CAAYC,IAAZ;AACA,eAAKY,KAAL;AACA,eAAO,OAAKX,QAAL,EAAP;AACD;AACD,aAAO,kBAAQzC,MAAR,CAAekD,MAAf,CAAP;AACD,KAfI,CAAP;AAgBD,GAnM+B;AAuMhCT,UAvMgC,sBAuMrB;AAAA;;AACT;AACA,SAAKF,MAAL,CAAYC,IAAZ;;AAEA,QAAI,KAAKtD,UAAT,EAAqB;AACnB,WAAKqD,MAAL,CAAYC,IAAZ;AACA,aAAO,KAAKF,OAAL,EAAP;AACD;;AAED,QAAMI,OAAO,KAAK7E,MAAL,CAAYwF,QAAzB;AACA,QAAI,KAAKxF,MAAL,CAAYC,SAAhB,EAA2B;AACzB4E,WAAKC,GAAL,GAAW,KAAK9E,MAAL,CAAY+E,kBAAvB;AACD;;AAED,WAAO,KAAKC,OAAL,CAAa;AAClBC,oBADkB;AAElB3C,oBAFkB;AAGlBmD,yBAHkB;AAIlBZ;AAJkB,KAAb,EAMJrC,IANI,CAMC,UAAC0C,GAAD;AAAA,aAAS,OAAKC,2BAAL,CAAiCD,GAAjC,CAAT;AAAA,KAND,CAAP;AAOD,GA5N+B;AAgOhCQ,YAhOgC,wBAgOnB;AAAA;;AACX,SAAKhB,MAAL,CAAYC,IAAZ;;AAEA,QAAI,CAAC,KAAK1D,GAAV,EAAe;AACb,WAAKyD,MAAL,CAAYiB,IAAZ;AACA,aAAO,kBAAQ3D,OAAR,EAAP;AACD;;AAED,WAAO,KAAKgD,OAAL,CAAa;AAClBd,WAAK,KAAKjD,GADQ;AAElBgE;AAFkB,KAAb,EAIJzC,IAJI,CAIC;AAAA,aAAM,OAAK+C,KAAL,EAAN;AAAA,KAJD,CAAP;AAKD,GA7O+B;AA+OhCA,OA/OgC,mBA+OjB;AACbK,iBAAa,KAAKC,YAAlB;;AADa,uCAANhD,IAAM;AAANA,UAAM;AAAA;;AAEb,yBAAc,uBAAYC,SAAZ,CAAsByC,KAApC,EAA2C,IAA3C,EAAiD1C,IAAjD;AACD,GAlP+B;AAoPhCsC,6BApPgC,uCAoPJD,GApPI,EAoPC;AAAA;;AAC/B,SAAKR,MAAL,CAAYC,IAAZ;AACA,SAAKmB,GAAL,CAASZ,IAAIL,IAAb;AACA,QAAI,KAAK7E,MAAL,CAAYC,SAAhB,EAA2B;AACzB,WAAKyE,MAAL,CAAYC,IAAZ;AACA,UAAMoB,QAAQ,CAAC,KAAK/F,MAAL,CAAY+E,kBAAZ,GAAiC,CAAjC,GAAqC,EAAtC,IAA4C,IAA1D;AACA,WAAKc,YAAL,GAAoB,kCAAe;AAAA,eAAM,OAAKpB,OAAL,EAAN;AAAA,OAAf,EAAqCsB,KAArC,CAApB;AACD;AACF,GA5P+B;AA8PhCxC,mBA9PgC,+BA8PZ;AAAA;;AAClBqC,iBAAa,KAAKlE,WAAlB;AACA,SAAKsE,KAAL;AACA,QAAI,KAAKhG,MAAL,CAAYiG,2BAAZ,IAA2C,KAAKtF,0BAAhD,IAA8E,KAAKD,0BAAvF,EAAmH;AACjH,WAAKwF,IAAL,gCAAyC;AAAA,eAAM,OAAK3C,iBAAL,EAAN;AAAA,OAAzC;;AAEA,UAAM4C,QAAQ,kCAAe,YAAM;AACjC,eAAK1C,KAAL,CAAWuB,OAAX,CAAmB;AACjBoB,mBAAS;AACP,sCAA0B,IADnB;AAEPC,wBAAY;AAFL,WADQ;AAKjBpB,uBALiB;AAMjBf,eAAK,OAAKvD;AANO,SAAnB,EAQGyE,KARH,CAQS,YAAM;AACX,iBAAKV,MAAL,CAAYC,IAAZ;AACA,iBAAO,OAAKlB,KAAL,CAAW6C,MAAX,EAAP;AACD,SAXH,EAYGlB,KAZH,CAYS,UAACC,MAAD,EAAY;AACjB,iBAAKX,MAAL,CAAYiB,IAAZ,0BAA0CN,MAA1C;AACD,SAdH;AAeD,OAhBa,EAgBX,KAAK3E,0BAAL,GAAkC,IAhBvB,CAAd;;AAkBA,WAAKgB,WAAL,GAAmByE,KAAnB;AACD;AACF,GAxR+B;AAAA;AAAA,CAAnB,8qCAAf;;kBA2RejG,M","file":"device.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {safeSetTimeout} from '@ciscospark/common-timers';\nimport {omit} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\nimport {persist, waitForValue, SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * Decides if this device should be persisted to boundedStorage, based on\n * this.config.ephemeral.\n * @returns {Boolean}\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  idAttribute: `url`,\n\n  namespace: `Device`,\n\n  props: {\n    // deviceType doesn't have any real value, but we need to send it during\n    // device refresh to make sure we don't get back an ios device url\n    deviceType: `string`,\n    intranetInactivityDuration: `number`,\n    intranetInactivityCheckUrl: `string`,\n    modificationTime: `string`,\n    searchEncryptionKeyUrl: `string`,\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: `object`\n    },\n    url: `string`,\n    userId: `string`,\n    webSocketUrl: `string`\n  },\n\n  derived: {\n    registered: {\n      deps: [`url`],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  session: {\n    // Fun Fact: setTimeout returns a Timer object instead of a Number in Node 6\n    // or later\n    logoutTimer: `any`,\n    lastUserActivityDate: `number`\n  },\n\n  @waitForValue(`@`)\n  determineService(url) {\n    for (const key of Object.keys(this.services)) {\n      const serviceUrl = this.services[key];\n      if (url.startsWith(serviceUrl)) {\n        // \"ServiceUrl\" is 10 characters\n        return Promise.resolve(key.substr(0, key.length - 10));\n      }\n    }\n\n    return Promise.reject(new Error(`${url} does not reflect a known service`));\n  },\n\n  @waitForValue(`@`)\n  getServiceUrl(service) {\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  @persist(`@`, decider)\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    [`developer`, `entitlement`, `user`].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger(`change`, this, options);\n        this.trigger(`change:features`, this, this.features, options);\n      });\n    });\n\n    this.listenToAndRun(this, `change:intranetInactivityCheckUrl`, () => this._resetLogoutTimer());\n    this.listenToAndRun(this, `change:intranetInactivityDuration`, () => this._resetLogoutTimer());\n    this.listenTo(this.spark, `user-activity`, () => {this.lastUserActivityDate = Date.now();});\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), `features`), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  @waitForValue(`@`)\n  isService(service) {\n    return this._isService(this.services, service)\n      .then((_isService) => _isService || this.isPreDiscoveryService(service));\n  },\n\n  @waitForValue(`@`)\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.services, uri));\n  },\n\n  @waitForValue(`@`)\n  isSpecificService(service, key) {\n    if (key === service) {\n      return Promise.resolve(true);\n    }\n\n    return this.getServiceUrl(service)\n      .then((serviceUrl) => key.includes(serviceUrl));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!target) {\n      return Promise.reject(new Error(`\\`target\\` is a required parameter`));\n    }\n\n    if (!service) {\n      return Promise.reject(new Error(`\\`service\\` is a required parameter`));\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    if (!uri) {\n      return Promise.reject(new Error(`\\`uri\\` is a required parameter`));\n    }\n\n    for (const key in target) {\n      if (target[key] && uri.indexOf(target[key]) === 0) {\n        return Promise.resolve(true);\n      }\n    }\n\n    return Promise.resolve(false);\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  refresh() {\n    this.logger.info(`device: refreshing`);\n\n    if (!this.registered) {\n      this.logger.info(`device: device not registered, registering`);\n      return this.register();\n    }\n\n    const body = omit(this.serialize(), `features`, `mediaClusters`);\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: `PUT`,\n      uri: this.url,\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info(`device: refresh failed with 404, attempting to register new device`);\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info(`device: registering`);\n\n    if (this.registered) {\n      this.logger.info(`device: device already registered, refreshing`);\n      return this.refresh();\n    }\n\n    const body = this.config.defaults;\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: `POST`,\n      service: `wdm`,\n      resource: `devices`,\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  unregister() {\n    this.logger.info(`device: unregistering`);\n\n    if (!this.url) {\n      this.logger.warn(`device: not registered`);\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: `DELETE`\n    })\n      .then(() => this.clear());\n  },\n\n  clear(...args) {\n    clearTimeout(this.refreshTimer);\n    Reflect.apply(SparkPlugin.prototype.clear, this, args);\n  },\n\n  _processRegistrationSuccess(res) {\n    this.logger.info(`device: received registration payload`);\n    this.set(res.body);\n    if (this.config.ephemeral) {\n      this.logger.info(`device: enqueing device refresh`);\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n  },\n\n  _resetLogoutTimer() {\n    clearTimeout(this.logoutTimer);\n    this.unset(`logoutTimer`);\n    if (this.config.enableInactivityEnforcement && this.intranetInactivityCheckUrl && this.intranetInactivityDuration) {\n      this.once(`change:lastUserActivityDate`, () => this._resetLogoutTimer());\n\n      const timer = safeSetTimeout(() => {\n        this.spark.request({\n          headers: {\n            'cisco-no-http-redirect': null,\n            trackingid: null\n          },\n          method: `GET`,\n          uri: this.intranetInactivityCheckUrl\n        })\n          .catch(() => {\n            this.logger.info(`device: did not reach internal ping endpoint; logging out after inactivity on a public network`);\n            return this.spark.logout();\n          })\n          .catch((reason) => {\n            this.logger.warn(`device: logout failed`, reason);\n          });\n      }, this.intranetInactivityDuration * 1000);\n\n      this.logoutTimer = timer;\n    }\n  }\n});\n\nexport default Device;\n"]}