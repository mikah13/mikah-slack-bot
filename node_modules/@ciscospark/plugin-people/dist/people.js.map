{"version":3,"sources":["people.js"],"names":["People","extend","namespace","get","person","reject","Error","id","personId","request","service","resource","then","res","body","list","options","qs","spark","inferPersonIdFromUuid","encode"],"mappings":";;;;;;;;;;AAMA;;AACA;;;;AAEA;;;;;;;;AAQA;;;;AAjBA;;;;;;AAqBA,IAAMA,SAAS,uBAAYC,MAAZ,CAAmB;AAChCC,qBADgC;;AAGhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAC,KAjCgC,eAiC5BC,MAjC4B,EAiCpB;AACV,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,mCAAf,CAAP;AACD;AACD,QAAMC,KAAKH,OAAOI,QAAP,IAAmBJ,OAAOG,EAA1B,IAAgCH,MAA3C;AACA,WAAO,KAAKK,OAAL,CAAa;AAClBC,sBADkB;AAElBC,4BAAoBJ;AAFF,KAAb,EAIJK,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAb;AAAA,KAJD,CAAP;AAKD,GA3C+B;;;AA6ChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAC,MApFgC,gBAoF3BC,OApF2B,EAoFlB;AAAA;;AACZ,WAAO,KAAKP,OAAL,CAAa;AAClBC,sBADkB;AAElBC,wBAFkB;AAGlBM,UAAID;AAHc,KAAb,EAKJJ,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKK,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GA3F+B;;;AA6FhC;;;;;;AAMAC,uBAnGgC,iCAmGVZ,EAnGU,EAmGN;AACxB,WAAO,eAAOa,MAAP,6BAAwCb,EAAxC,CAAP;AACD,GArG+B;AAAA;AAAA,CAAnB,CAAf;;kBAwGeP,M","file":"people.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\nimport {base64} from '@ciscospark/common';\n\n/**\n * @typedef {Object} Types~Person\n * @property {uuid} id - Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - The date and time that the person was created\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst People = SparkPlugin.extend({\n  namespace: `People`,\n\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {Types~Person|uuid} person\n   * @returns {Promise<Types~Person>}\n   * @example\n   * ciscospark.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return ciscospark.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(person) {\n    if (!person) {\n      return Promise.reject(new Error(`A person with an id is required`));\n    }\n    const id = person.personId || person.id || person;\n    return this.request({\n      service: `hydra`,\n      resource: `people/${id}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object} options\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.displayName - Returns people with a name that contains this string\n   * @returns {Promise<Page<Types~Person>>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: `hydra`,\n      resource: `people`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Convertis a uuid to a hydra id without a network dip.\n   * @param {string} id\n   * @private\n   * @returns {string}\n   */\n  inferPersonIdFromUuid(id) {\n    return base64.encode(`ciscospark://us/PEOPLE/${id}`);\n  }\n});\n\nexport default People;\n"]}