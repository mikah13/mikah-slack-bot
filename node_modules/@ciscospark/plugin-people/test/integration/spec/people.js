/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/plugin-people';

import {assert} from '@ciscospark/test-helper-chai';
import CiscoSpark from '@ciscospark/spark-core';
import '@ciscospark/plugin-people';
import '@ciscospark/internal-plugin-mercury';
import testUsers from '@ciscospark/test-helper-test-users';

describe(`plugin-people`, function() {
  this.timeout(60000);
  describe(`People`, () => {
    let mccoy, spock;

    beforeEach(`create users`, () => testUsers.create({count: 2})
      .then((users) => {
        [spock, mccoy] = users;
        spock.spark = new CiscoSpark({
          credentials: {
            authorization: users[0].token
          }
        });
        mccoy.spark = new CiscoSpark({
          credentials: {
            authorization: users[1].token
          }
        });
      }));

    describe(`#get()`, () => {
      it(`gets a person by id`, () => {
        return spock.spark.people.get(mccoy.id)
          .then((peopleResponse) => {
            assert.isPerson(peopleResponse);
            assert.equal(peopleResponse.emails[0], mccoy.email);
          });
      });
    });

    describe(`#list()`, () => {
      it(`returns a list of people matching email address`, () => {
        return spock.spark.people.list({email: mccoy.email})
          .then((peopleResponse) => {
            assert.isAbove(peopleResponse.items.length, 0);
            const person = peopleResponse.items[0];
            assert.isPerson(person);
            assert.equal(person.emails[0], mccoy.email);
          });
      });

      it(`returns a list of people matching name`, () => {
        return spock.spark.people.list({displayName: mccoy.name})
          .then((peopleResponse) => {
            assert.isAbove(peopleResponse.items.length, 0);
            let isMccoyFound = false;
            peopleResponse.items.forEach((person) => {
              if (person.displayName === mccoy.name) {
                isMccoyFound = true;
              }
              assert.isPerson(person);
            });
            assert.isTrue(isMccoyFound);
          });
      });
    });

    describe(`#inferPersonId`, () => {
      it(`infers a person id without a network dip`, () => spock.spark.people.get(spock.id)
        .then((me) => assert.equal(spock.spark.people.inferPersonIdFromUuid(spock.id), me.id)));
    });
  });
});
