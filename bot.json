{ type: 'slack',
  botkit:
   { events:
      { spawned: [Array],
        heard_trigger: [Array],
        command_triggered: [Array],
        remote_command_end: [Array],
        channel_join: [Array],
        direct_message: [Array],
        direct_mention: [Array],
        mention: [Array] },
     config:
      { debug: true,
        hostname: '0.0.0.0',
        logLevel: 'debug',
        rtm_receive_messages: true },
     tasks: [],
     taskCount: 0,
     convoCount: 0,
     my_version: '0.6.7',
     my_user_agent: 'Botkit/0.6.7 darwin/17.3.0 node/9.3.0',
     memory_store: { users: [Object], channels: {}, teams: {} },
     utterances:
      { yes: /^(yes|yea|yup|yep|ya|sure|ok|y|yeah|yah)/i,
        no: /^(no|nah|nope|n)/i,
        quit: /^(quit|cancel|end|stop|done|exit|nevermind|never mind)/i },
     middleware:
      { spawn: [Ware],
        ingest: [Ware],
        normalize: [Ware],
        categorize: [Ware],
        receive: [Ware],
        heard: [Ware],
        triggered: [Ware],
        capture: [Ware],
        format: [Ware],
        send: [Ware] },
     ingest: [Function],
     normalize: [Function],
     categorize: [Function],
     receiveMessage: [Function],
     storage: { teams: [Object], users: [Object], channels: [Object] },
     hears_regexp: [Function],
     changeEars: [Function],
     hears: [Function],
     on: [Function],
     trigger: [Function],
     startConversation: [Function],
     createConversation: [Function],
     defineBot: [Function],
     spawn: [Function],
     startTicking: [Function],
     shutdown: [Function],
     startTask: [Function],
     tick: [Function],
     setupWebserver: [Function],
     worker: [Function],
     userAgent: [Function],
     version: [Function],
     logger: { log: [Function: log] },
     log:
      { [Function]
        emergency: [Function: bound log],
        alert: [Function: bound log],
        critical: [Function: bound log],
        error: [Function: bound log],
        warning: [Function: bound log],
        notice: [Function: bound log],
        info: [Function: bound log],
        debug: [Function: bound log] },
     debug: [Function: bound log],
     hears_test: [Function],
     studio:
      { evaluateTrigger: [Function],
        getScripts: [Function],
        getScript: [Function],
        validate: [Function],
        beforeThread: [Function],
        before: [Function],
        after: [Function],
        run: [Function],
        get: [Function],
        runTrigger: [Function],
        testTrigger: [Function],
        compileScript: [Function] },
     configureSlackApp: [Function],
     createHomepageEndpoint: [Function],
     createWebhookEndpoints: [Function],
     findAppropriateTeam: [Function],
     handleWebhookPayload: [Function],
     saveTeam: [Function],
     findTeamById: [Function],
     getAuthorizeURL: [Function],
     createOauthEndpoints: [Function],
     tickInterval:
      Timeout {
        _called: true,
        _idleTimeout: 1500,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 50858,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: 1500,
        _destroyed: false,
        [Symbol(asyncId)]: 99,
        [Symbol(triggerAsyncId)]: 72 } },
  config: { token: 'xoxb-296916603351-HYkxv4aIBvUdsrnrnsc1Oxsf' },
  utterances:
   { yes: /^(yes|yea|yup|yep|ya|sure|ok|y|yeah|yah)/i,
     no: /^(no|nah|nope|n)/i,
     quit: /^(quit|cancel|end|stop|done|exit|nevermind|never mind)/i },
  api:
   { api_url: 'https://slack.com/api/',
     callAPI: [Function],
     callAPIWithoutToken: [Function],
     auth: { test: [Function] },
     oauth: { access: [Function] },
     channels:
      { archive: [Function],
        create: [Function],
        history: [Function],
        info: [Function],
        invite: [Function],
        join: [Function],
        kick: [Function],
        leave: [Function],
        list: [Function],
        mark: [Function],
        rename: [Function],
        replies: [Function],
        setPurpose: [Function],
        setTopic: [Function],
        unarchive: [Function] },
     chat:
      { delete: [Function],
        postMessage: [Function],
        postEphemeral: [Function],
        update: [Function],
        unfurl: [Function] },
     conversations:
      { archive: [Function],
        close: [Function],
        create: [Function],
        history: [Function],
        info: [Function],
        invite: [Function],
        join: [Function],
        kick: [Function],
        leave: [Function],
        list: [Function],
        members: [Function],
        open: [Function],
        rename: [Function],
        replies: [Function],
        setPurpose: [Function],
        setTopic: [Function],
        unarchive: [Function] },
     dialog: { open: [Function] },
     dnd:
      { endDnd: [Function],
        endSnooze: [Function],
        info: [Function],
        setSnooze: [Function],
        teamInfo: [Function] },
     emoji: { list: [Function] },
     files:
      { delete: [Function],
        info: [Function],
        list: [Function],
        upload: [Function],
        sharedPublicURL: [Function] },
     groups:
      { archive: [Function],
        close: [Function],
        create: [Function],
        createChild: [Function],
        history: [Function],
        info: [Function],
        invite: [Function],
        kick: [Function],
        leave: [Function],
        list: [Function],
        mark: [Function],
        open: [Function],
        rename: [Function],
        replies: [Function],
        setPurpose: [Function],
        setTopic: [Function],
        unarchive: [Function] },
     im:
      { close: [Function],
        history: [Function],
        list: [Function],
        mark: [Function],
        open: [Function],
        replies: [Function] },
     mpim:
      { close: [Function],
        history: [Function],
        list: [Function],
        mark: [Function],
        open: [Function],
        replies: [Function] },
     pins: { add: [Function], list: [Function], remove: [Function] },
     reactions:
      { add: [Function],
        get: [Function],
        list: [Function],
        remove: [Function] },
     reminders:
      { add: [Function],
        complete: [Function],
        delete: [Function],
        info: [Function],
        list: [Function] },
     rtm: { start: [Function], connect: [Function] },
     search: { all: [Function], files: [Function], messages: [Function] },
     stars: { add: [Function], list: [Function], remove: [Function] },
     team:
      { accessLogs: [Function],
        info: [Function],
        billableInfo: [Function],
        integrationLogs: [Function],
        profile: [Object] },
     usergroups:
      { create: [Function],
        disable: [Function],
        enable: [Function],
        list: [Function],
        update: [Function],
        users: [Object] },
     users:
      { getPresence: [Function],
        info: [Function],
        identity: [Function],
        list: [Function],
        setActive: [Function],
        setPresence: [Function],
        deletePhoto: [Function],
        setPhoto: [Function],
        profile: [Object] } },
  identity: { id: 'U8QSYHRAB', name: 'mikah-bot' },
  configureIncomingWebhook: [Function],
  sendWebhook: [Function],
  configureRTM: [Function],
  closeRTM: [Function],
  destroy: [Function],
  startRTM: [Function],
  identifyBot: [Function],
  identifyTeam: [Function],
  startPrivateConversation: [Function],
  startConversationInThread: [Function],
  createPrivateConversation: [Function],
  createConversationInThread: [Function],
  _startDM: [Function],
  send: [Function],
  sendEphemeral: [Function],
  replyAcknowledge: [Function],
  replyPublic: [Function],
  replyPublicDelayed: [Function],
  replyPrivate: [Function],
  replyPrivateDelayed: [Function],
  replyInteractive: [Function],
  dialogOk: [Function],
  dialogError: [Function],
  replyWithDialog: [Function],
  createDialog: [Function],
  reply: [Function],
  whisper: [Function],
  replyInThread: [Function],
  startTyping: [Function],
  replyWithTyping: [Function],
  replyAndUpdate: [Function],
  findConversation: [Function],
  getInstanceInfo: [Function],
  getMessageUser: [Function],
  say: [Function],
  startConversation: [Function],
  createConversation: [Function],
  team_info: { id: 'T8PR6JM8S', name: 'mikah-test', domain: 'mikah-test' },
  rtm:
   WebSocket {
     domain: null,
     _events:
      { pong: [Function],
        open: [Function],
        error: [Function],
        close: [Function],
        message: [Function] },
     _eventsCount: 5,
     _maxListeners: undefined,
     readyState: 1,
     bytesReceived: 2328,
     extensions: {},
     protocol: '',
     _binaryType: 'nodebuffer',
     _finalize: { [Function: bound finalize] __ultron: 0 },
     _finalizeCalled: false,
     _closeMessage: null,
     _closeTimer: null,
     _closeCode: null,
     _receiver:
      Receiver {
        binaryType: 'nodebuffer',
        extensions: {},
        maxPayload: 0,
        bufferedBytes: 0,
        buffers: [],
        compressed: false,
        payloadLength: 149,
        fragmented: 0,
        masked: false,
        fin: true,
        mask: null,
        opcode: 1,
        totalPayloadLength: 0,
        messageLength: 0,
        fragments: [],
        cleanupCallback: null,
        hadError: false,
        dead: false,
        loop: true,
        onmessage: [Function],
        onclose: [Function],
        onerror: [Function],
        onping: [Function],
        onpong: [Function],
        state: 4 },
     _sender:
      Sender {
        perMessageDeflate: undefined,
        _socket: [TLSSocket],
        firstFragment: true,
        compress: false,
        bufferedBytes: 0,
        deflating: false,
        queue: [],
        onerror: [Function] },
     _socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: null,
        npnProtocol: undefined,
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 8,
        connecting: false,
        _hadError: false,
        _handle: [TLSWrap],
        _parent: null,
        _host: 'mpmulti-xxxx.lb.slack-msgs.com',
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 430,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: [TLSWrap],
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 72,
        [Symbol(bytesRead)]: 0,
        [Symbol(connect-options)]: [Object] },
     _ultron: Ultron { id: 0, ee: [TLSSocket] },
     protocolVersion: 13,
     _isServer: false,
     url: 'wss://mpmulti-xxxx.lb.slack-msgs.com/websocket/PeBCa6HQ-uzS_Zb3Zcwqe2BRYQEXKFfLKScN7JiG2KPe28x2h0AVXAbsGqAbLQ4A-OZJfnQZqFWt0bgYATTIH1Ad9cvuF0mWK4q5bQcWC1yBBoSxdwPREuy2keSuJFYaSKms5G7G1sp6IqKD/2?dp=1',
     _req: null },
  msgcount: 3 }
